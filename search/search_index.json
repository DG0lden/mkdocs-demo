{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Main title This is a demo web-site with mkdocs","title":"Home"},{"location":"#main-title","text":"This is a demo web-site with mkdocs","title":"Main title"},{"location":"roadmap/","text":"Roadmap do something do something else","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"do something do something else","title":"Roadmap"},{"location":"architecture/","text":"Use Cases Login with FinTech Application Search Bank Select Bank List of Transactions Redirect to Consent Authorization API Authorize Consent Redirect Approach Authorize Consent Embedded Approach","title":"Use Cases"},{"location":"architecture/#use-cases","text":"Login with FinTech Application Search Bank Select Bank List of Transactions Redirect to Consent Authorization API Authorize Consent Redirect Approach Authorize Consent Embedded Approach","title":"Use Cases"},{"location":"architecture/1-loginWithFinTech/","text":"User Login Diagram Description","title":"User Login"},{"location":"architecture/1-loginWithFinTech/#user-login","text":"","title":"User Login"},{"location":"architecture/1-loginWithFinTech/#diagram","text":"","title":"Diagram"},{"location":"architecture/1-loginWithFinTech/#description","text":"","title":"Description"},{"location":"architecture/2-searchBank/","text":"PSU Searches Bank By Keyword Definition Describes the bank search functionality in a FinTech Application. Generally bank search is provided to prevent PSU from manually entering complicated bank identifiers. This bank search API allows for incremental keyword based search. Implementation Approaches We will distinguish between remote and local incremental search. Remote Incremental Search The remote incremental search is implemented on the server side. A rest endpoint receives a searchString and return a list of matching search entries. Use Case Steps Use cases for this API: PSU loads FinTechSearchScreen FinTechUI displays a search screen to the PSU PSU enters any keyword in the search input field FinTechUI forward request to FinTechAPI FinTechAPI forward request to TppBeanSearchApi TppBankSearchApi returns a list of matching BankDescriptors to FinTechAPI FinTechAPI returns a list of matching BankDescriptors to FinTechBankSearchUI UI displays list of found bank descriptors to PSU Step 4. through 8. is repeated as long as PSU modifies keywords (by adding or removing characters) Local Incremental Search Local incremental search generally provides a way of reducing round trip to servers. So there is no local incremental search endpoint, but an endpoint to download the list of all BankDescriptors. The client is then responsible for the indexing and the implementation of the search logic. For the purpose of keeping the client code simple, interface will also provide the possibility of downloading a standard lucene index file, as many platform provide login provide processing of lucene indexes. This approach will prevent each client from perfoming the expensive lucene indexing. The following diagram describes additional steps performed in the local incremental search. Use Case Steps Use cases for this API: 1. PSU loads FinTechSearchScreen 2. FinTechUI requests the BankSearchIndex from FinTechApi 3. FinTechApi requests the BankSearchIndex from TppBeanSearchApi 4. TppBeanSearchApi return BankSearchIndex to FinTechApi 5. FinTechApi return BankSearchIndex to FinTechUI 6. FinTechUI displays a search screen to the PSU 7. PSU enters any keyword in the search input field 8. FinTechUI call the search routine of the embedded LuceneSearch 9. LuceneSearch uses the keyword to retrieve the list of matching entries 10. LuceneSearch returns a list of matching BankDescriptors to FinTechBankSearchUI 11. UI displays list of found bank descriptors to PSU Step 8. through 11. is repeated as long as PSU modifies keywords (by adding or removing characters) Like this diagram shows, local bank search does not send request to the network. New Idioms Discriminator A discriminator can be used to limit the size of the index returned to client. If for example the TPP does not support some banks, there is no need for returning those banks to the client. LuceneSearch This is the UI-Komponent that operates on a lucene search index in the UI-Application. Caching Search Index SearchIndex might be cached on client as adding and removing bank records to the configuration does not happen frequently.","title":"Search bank"},{"location":"architecture/2-searchBank/#psu-searches-bank-by-keyword","text":"","title":"PSU Searches Bank By Keyword"},{"location":"architecture/2-searchBank/#definition","text":"Describes the bank search functionality in a FinTech Application. Generally bank search is provided to prevent PSU from manually entering complicated bank identifiers. This bank search API allows for incremental keyword based search.","title":"Definition"},{"location":"architecture/2-searchBank/#implementation-approaches","text":"We will distinguish between remote and local incremental search.","title":"Implementation Approaches"},{"location":"architecture/2-searchBank/#remote-incremental-search","text":"The remote incremental search is implemented on the server side. A rest endpoint receives a searchString and return a list of matching search entries.","title":"Remote Incremental Search"},{"location":"architecture/2-searchBank/#use-case-steps","text":"Use cases for this API: PSU loads FinTechSearchScreen FinTechUI displays a search screen to the PSU PSU enters any keyword in the search input field FinTechUI forward request to FinTechAPI FinTechAPI forward request to TppBeanSearchApi TppBankSearchApi returns a list of matching BankDescriptors to FinTechAPI FinTechAPI returns a list of matching BankDescriptors to FinTechBankSearchUI UI displays list of found bank descriptors to PSU Step 4. through 8. is repeated as long as PSU modifies keywords (by adding or removing characters)","title":"Use Case Steps"},{"location":"architecture/2-searchBank/#local-incremental-search","text":"Local incremental search generally provides a way of reducing round trip to servers. So there is no local incremental search endpoint, but an endpoint to download the list of all BankDescriptors. The client is then responsible for the indexing and the implementation of the search logic. For the purpose of keeping the client code simple, interface will also provide the possibility of downloading a standard lucene index file, as many platform provide login provide processing of lucene indexes. This approach will prevent each client from perfoming the expensive lucene indexing. The following diagram describes additional steps performed in the local incremental search.","title":"Local Incremental Search"},{"location":"architecture/2-searchBank/#use-case-steps_1","text":"Use cases for this API: 1. PSU loads FinTechSearchScreen 2. FinTechUI requests the BankSearchIndex from FinTechApi 3. FinTechApi requests the BankSearchIndex from TppBeanSearchApi 4. TppBeanSearchApi return BankSearchIndex to FinTechApi 5. FinTechApi return BankSearchIndex to FinTechUI 6. FinTechUI displays a search screen to the PSU 7. PSU enters any keyword in the search input field 8. FinTechUI call the search routine of the embedded LuceneSearch 9. LuceneSearch uses the keyword to retrieve the list of matching entries 10. LuceneSearch returns a list of matching BankDescriptors to FinTechBankSearchUI 11. UI displays list of found bank descriptors to PSU Step 8. through 11. is repeated as long as PSU modifies keywords (by adding or removing characters) Like this diagram shows, local bank search does not send request to the network.","title":"Use Case Steps"},{"location":"architecture/2-searchBank/#new-idioms","text":"","title":"New Idioms"},{"location":"architecture/2-searchBank/#discriminator","text":"A discriminator can be used to limit the size of the index returned to client. If for example the TPP does not support some banks, there is no need for returning those banks to the client.","title":"Discriminator"},{"location":"architecture/2-searchBank/#lucenesearch","text":"This is the UI-Komponent that operates on a lucene search index in the UI-Application.","title":"LuceneSearch"},{"location":"architecture/2-searchBank/#caching-search-index","text":"SearchIndex might be cached on client as adding and removing bank records to the configuration does not happen frequently.","title":"Caching Search Index"},{"location":"architecture/3-selectBank/","text":"Select Bank General terms defined in the dictionary Definition The bank selection allows to download the BankProfile of a bank and cache it in the consent session for reuse while processing the PSU request. It can also be used to display bank details to the PSU at selection. Diagram Use Case Steps Use cases for this API: 1. PSU selects a bank from the list of banks displayed by the FinTechUI 2. FinTechUI sends a load loadBankProfile request to FinTechAPI passing the bankId 3. FinTechAPI sends a load loadBankProfile request to TppBeanSearchApi passing the bankId 4. TppBankSearchApi returns the BankProfine object matching the given bankId. The displayed bank profile also displays banking api services offered by the selected bank.","title":"Select Bank"},{"location":"architecture/3-selectBank/#select-bank","text":"General terms defined in the dictionary","title":"Select Bank"},{"location":"architecture/3-selectBank/#definition","text":"The bank selection allows to download the BankProfile of a bank and cache it in the consent session for reuse while processing the PSU request. It can also be used to display bank details to the PSU at selection.","title":"Definition"},{"location":"architecture/3-selectBank/#diagram","text":"","title":"Diagram"},{"location":"architecture/3-selectBank/#use-case-steps","text":"Use cases for this API: 1. PSU selects a bank from the list of banks displayed by the FinTechUI 2. FinTechUI sends a load loadBankProfile request to FinTechAPI passing the bankId 3. FinTechAPI sends a load loadBankProfile request to TppBeanSearchApi passing the bankId 4. TppBankSearchApi returns the BankProfine object matching the given bankId. The displayed bank profile also displays banking api services offered by the selected bank.","title":"Use Case Steps"},{"location":"architecture/4-initiateAisConsent/","text":"List Of Transactions General terms defined in the dictionary Definition Request the list of transactions for a given bank account. Initiates a consent request if necessary. Generally the consent request is not explicitly initiated by the PSU. When the PSU requests for a banking service, if the FinTech has an existing consent that covers the service, no new consent will be initiated. Diagram Use Cases 1. FinTechUI displays BankProfile to PSU ==> FinTechUI --> psu : displayBankServices(BankProfile) The result of a bank selection ist that the FinTechUI displays the list of services offered by the selected bank to the PSU. 2. PSU selects a service (Like listTransactions) ==> psu -> FinTechUI ++ : selectService\\n\"listTransactions(BankProfile)\" 3. FinTechUI forwards service request to FinTechApi ==> FinTechUI -> FinTechApi ++ : listTransactions[FinTechLoginSessionCookie,\\nUserAgentContext](BankProfile,ListTransactionsSpec)<> - The attached FinTechLoginSessionCookie is used to maintain session between PSU and FinTech. - The attached UserAgentContext describes details associated with the user agent of the PSU. - The given BankProfile contains meta information associated with the selected Bank. - The ListTransactionsSpec specifies details of the service requested by the PSU. 3.1 Load PsuConsentSession ==> FinTechApi -> FinTechApi : psuConsentSession\\n(FinTechLoginSessionCookie,\\nBankProfile,ListTransactionsSpec)<> FinTechApi loads any matching existing PsuConsentSession . The FinTechLoginSessionCookie holds the reference of the PSU in the system of the FinTech. 4. FinTechApi forwards service request to TppBankingApi ==> FinTechApi -> TppBankingApi ++ : listTransactions[UserAgentContext,\\nPsuConsentSession,FinTechContext]\\n(BankProfile,ListTransactionsSpec)<> The associated FinTechContext contains identification information associated with the FinTech. 4.1 Loads the BankingProtocol from the given BankProfile TppBankingApi selects the BankingProtocol based on the given BankProfile. 5. TppBankingApi forwards service request to BankingProtocol The BankingProtocol associated with the given BankProfile decides on how to proceed with the request. BankingProtocol can: 5.1 Load TppConsentSession Use an eventual consentId contained in the given PsuConsentSession to load an existing TppConsentSession . Use the loaded TppConsentSession to retrieve an existing consent and proceed to the ASPSP with the service request. 6. No Suitable Consent Present 6.0 Initiating a Consent with the ASPSP If there is no suitable consent available, the BankingProtocol will first proceed with a consent initiation request.. This is, an initiated service request will either ends up in the expected service response or first redirect the PSU to the ConsentAuthorisationApi . Whether this operation is necessary or not depends on the AspspBankingApi interface. The selected banking protocol will know how to deal with this. The Associated TppContext contains Tpp identifying information. 6.1 ConsentInit Response The response of the consent init request depends on the ASPSP implementation. It generally provides information needed to collect PSU identification information in the embedded case or information needed to redirect the PSU to the OnlineBankingApi . The result of a consent init session also carries an TppConsentSession , containing all information needed to be stored by the Tpp for the reference of the started consent session. 6.2 BankingProtocol calls RedirectSessionStoreApi for a redirectCode 6.3 RedirectSessionStoreApi The RedirectSessionStoreApi will encrypt and store the redirect session, indexing it with a redirectCode that can be used upon redirection by the ConsentAuthorisationApi to retrieve the corresponding TppConsentSession . 6.3a Encryption Encryption is performed to prevent unlawfull use of contained information in the Tpp's backend environment during the redirect session. 6.3b Storage an Expiration Encrypted TppConsentSession shall only be stored for the duration of the redirect session. 6.3c Auto Cleanup Auto Cleanup process will make sure all expired redirect sessions are removed from that storage. 6.4 RedirectSessionStoreApi returns redirectCode to BankingProtocol The redirectCode is a one time string that contains information used to retrieve redirectInfo from the TPP Server in a back channel. The redirectCode is short lived (like 10 seconds). This is, TPP server does not need to hold the record indexed by this redirectCode for more than the given expiration time. Record must also be deleted by the TPP on first retrieval by the ConsentAPI. 6.5 BankingProtocol reproduces PsuConsentSession from the TppConsentSession 6.6 Resulting Redirect Information is returned to the TppBankingApi The attached AspspRedirectInfo contains all information necessary to redirect the PSU to the ConsentAuthorisationApi . 6.7 TppBankingApi returns the PsuConsentSession an a redirectCode to FinTechApi 6.8 FinTechConsentSessionCookie Available in the request header. This cookie shall be set for the Max time given to the PSU for the authorization of the corresponding consent. The cookie can be bound to the end point FinTechApi.consentAuthDone so it does no need to be transported to the server on other requests. 6.8a finTechConsentSessionState Will be used to read and validate the corresponding FinTechConsentSessionCookie. 6.9 FinTechApi redirects userAgent to the ConsentAuthorisationApi PsuUserAgent redirection happens using a HTTP_302 redirectCode is attached as a query parameter produced FinTechLoginSessionCookie is returned as a cookie to the PsuUserAgent 7. Suitable Consent Present 7.1 Forward Service Request to ASPSP Service request is forwarded to the AspspBankingApi together with a reference to the consent. The Associated TppContext contains Tpp identifying information. 7.2 Returned Service Response if sent and displayed to the PSU.","title":"List Of Transactions"},{"location":"architecture/4-initiateAisConsent/#list-of-transactions","text":"General terms defined in the dictionary","title":"List Of Transactions"},{"location":"architecture/4-initiateAisConsent/#definition","text":"Request the list of transactions for a given bank account. Initiates a consent request if necessary. Generally the consent request is not explicitly initiated by the PSU. When the PSU requests for a banking service, if the FinTech has an existing consent that covers the service, no new consent will be initiated.","title":"Definition"},{"location":"architecture/4-initiateAisConsent/#diagram","text":"","title":"Diagram"},{"location":"architecture/4-initiateAisConsent/#use-cases","text":"","title":"Use Cases"},{"location":"architecture/4-initiateAisConsent/#1-fintechui-displays-bankprofile-to-psu","text":"==> FinTechUI --> psu : displayBankServices(BankProfile) The result of a bank selection ist that the FinTechUI displays the list of services offered by the selected bank to the PSU.","title":"1. FinTechUI displays BankProfile to PSU"},{"location":"architecture/4-initiateAisConsent/#2-psu-selects-a-service-like-listtransactions","text":"==> psu -> FinTechUI ++ : selectService\\n\"listTransactions(BankProfile)\"","title":"2. PSU selects a service (Like listTransactions)"},{"location":"architecture/4-initiateAisConsent/#3-fintechui-forwards-service-request-to-fintechapi","text":"==> FinTechUI -> FinTechApi ++ : listTransactions[FinTechLoginSessionCookie,\\nUserAgentContext](BankProfile,ListTransactionsSpec)<> - The attached FinTechLoginSessionCookie is used to maintain session between PSU and FinTech. - The attached UserAgentContext describes details associated with the user agent of the PSU. - The given BankProfile contains meta information associated with the selected Bank. - The ListTransactionsSpec specifies details of the service requested by the PSU.","title":"3. FinTechUI forwards service request to FinTechApi"},{"location":"architecture/4-initiateAisConsent/#31-load-psuconsentsession","text":"==> FinTechApi -> FinTechApi : psuConsentSession\\n(FinTechLoginSessionCookie,\\nBankProfile,ListTransactionsSpec)<> FinTechApi loads any matching existing PsuConsentSession . The FinTechLoginSessionCookie holds the reference of the PSU in the system of the FinTech.","title":"3.1 Load PsuConsentSession"},{"location":"architecture/4-initiateAisConsent/#4-fintechapi-forwards-service-request-to-tppbankingapi","text":"==> FinTechApi -> TppBankingApi ++ : listTransactions[UserAgentContext,\\nPsuConsentSession,FinTechContext]\\n(BankProfile,ListTransactionsSpec)<> The associated FinTechContext contains identification information associated with the FinTech.","title":"4. FinTechApi forwards service request to TppBankingApi"},{"location":"architecture/4-initiateAisConsent/#41-loads-the-bankingprotocol-from-the-given-bankprofile","text":"TppBankingApi selects the BankingProtocol based on the given BankProfile.","title":"4.1 Loads the BankingProtocol from the given BankProfile"},{"location":"architecture/4-initiateAisConsent/#5-tppbankingapi-forwards-service-request-to-bankingprotocol","text":"The BankingProtocol associated with the given BankProfile decides on how to proceed with the request. BankingProtocol can:","title":"5. TppBankingApi forwards service request to BankingProtocol"},{"location":"architecture/4-initiateAisConsent/#51-load-tppconsentsession","text":"Use an eventual consentId contained in the given PsuConsentSession to load an existing TppConsentSession . Use the loaded TppConsentSession to retrieve an existing consent and proceed to the ASPSP with the service request.","title":"5.1 Load TppConsentSession"},{"location":"architecture/4-initiateAisConsent/#6-no-suitable-consent-present","text":"","title":"6. No Suitable Consent Present"},{"location":"architecture/4-initiateAisConsent/#60-initiating-a-consent-with-the-aspsp","text":"If there is no suitable consent available, the BankingProtocol will first proceed with a consent initiation request.. This is, an initiated service request will either ends up in the expected service response or first redirect the PSU to the ConsentAuthorisationApi . Whether this operation is necessary or not depends on the AspspBankingApi interface. The selected banking protocol will know how to deal with this. The Associated TppContext contains Tpp identifying information.","title":"6.0 Initiating a Consent with the ASPSP"},{"location":"architecture/4-initiateAisConsent/#61-consentinit-response","text":"The response of the consent init request depends on the ASPSP implementation. It generally provides information needed to collect PSU identification information in the embedded case or information needed to redirect the PSU to the OnlineBankingApi . The result of a consent init session also carries an TppConsentSession , containing all information needed to be stored by the Tpp for the reference of the started consent session.","title":"6.1 ConsentInit Response"},{"location":"architecture/4-initiateAisConsent/#62-bankingprotocol-calls-redirectsessionstoreapi-for-a-redirectcode","text":"","title":"6.2 BankingProtocol calls RedirectSessionStoreApi for a redirectCode"},{"location":"architecture/4-initiateAisConsent/#63-redirectsessionstoreapi","text":"The RedirectSessionStoreApi will encrypt and store the redirect session, indexing it with a redirectCode that can be used upon redirection by the ConsentAuthorisationApi to retrieve the corresponding TppConsentSession .","title":"6.3 RedirectSessionStoreApi"},{"location":"architecture/4-initiateAisConsent/#63a-encryption","text":"Encryption is performed to prevent unlawfull use of contained information in the Tpp's backend environment during the redirect session.","title":"6.3a Encryption"},{"location":"architecture/4-initiateAisConsent/#63b-storage-an-expiration","text":"Encrypted TppConsentSession shall only be stored for the duration of the redirect session.","title":"6.3b Storage an Expiration"},{"location":"architecture/4-initiateAisConsent/#63c-auto-cleanup","text":"Auto Cleanup process will make sure all expired redirect sessions are removed from that storage.","title":"6.3c Auto Cleanup"},{"location":"architecture/4-initiateAisConsent/#64-redirectsessionstoreapi-returns-redirectcode-to-bankingprotocol","text":"The redirectCode is a one time string that contains information used to retrieve redirectInfo from the TPP Server in a back channel. The redirectCode is short lived (like 10 seconds). This is, TPP server does not need to hold the record indexed by this redirectCode for more than the given expiration time. Record must also be deleted by the TPP on first retrieval by the ConsentAPI.","title":"6.4 RedirectSessionStoreApi returns redirectCode to BankingProtocol"},{"location":"architecture/4-initiateAisConsent/#65-bankingprotocol-reproduces-psuconsentsession-from-the-tppconsentsession","text":"","title":"6.5 BankingProtocol reproduces PsuConsentSession from the TppConsentSession"},{"location":"architecture/4-initiateAisConsent/#66-resulting-redirect-information-is-returned-to-the-tppbankingapi","text":"The attached AspspRedirectInfo contains all information necessary to redirect the PSU to the ConsentAuthorisationApi .","title":"6.6 Resulting Redirect Information is returned to the TppBankingApi"},{"location":"architecture/4-initiateAisConsent/#67-tppbankingapi-returns-the-psuconsentsession-an-a-redirectcode-to-fintechapi","text":"","title":"6.7 TppBankingApi returns the PsuConsentSession an a redirectCode to FinTechApi"},{"location":"architecture/4-initiateAisConsent/#68-fintechconsentsessioncookie","text":"Available in the request header. This cookie shall be set for the Max time given to the PSU for the authorization of the corresponding consent. The cookie can be bound to the end point FinTechApi.consentAuthDone so it does no need to be transported to the server on other requests.","title":"6.8 FinTechConsentSessionCookie"},{"location":"architecture/4-initiateAisConsent/#68a-fintechconsentsessionstate","text":"Will be used to read and validate the corresponding FinTechConsentSessionCookie.","title":"6.8a finTechConsentSessionState"},{"location":"architecture/4-initiateAisConsent/#69-fintechapi-redirects-useragent-to-the-consentauthorisationapi","text":"PsuUserAgent redirection happens using a HTTP_302 redirectCode is attached as a query parameter produced FinTechLoginSessionCookie is returned as a cookie to the PsuUserAgent","title":"6.9 FinTechApi redirects userAgent to the ConsentAuthorisationApi"},{"location":"architecture/4-initiateAisConsent/#7-suitable-consent-present","text":"","title":"7. Suitable Consent Present"},{"location":"architecture/4-initiateAisConsent/#71-forward-service-request-to-aspsp","text":"Service request is forwarded to the AspspBankingApi together with a reference to the consent. The Associated TppContext contains Tpp identifying information.","title":"7.1 Forward Service Request to ASPSP"},{"location":"architecture/4-initiateAisConsent/#72-returned-service-response-if-sent-and-displayed-to-the-psu","text":"","title":"7.2 Returned Service Response if sent and displayed to the PSU."},{"location":"architecture/5-redirectPsuToConsentAPI/","text":"Redirect PSU to consent API 1. ConsentAuthorisationApi The redirect start with a get request to the entryPoint of the ConsentAuthorisationApi, for authorizing a consent initiated on the TppBankingApi side. Diagram Request processing ConsentAPI 2.1 Retrieve Corresponding BankingProtocol ConsentAuthorisationApi will use the given redirectCode to load the matching BankingProtocol. 2.2 .. 2.6 Retrieve associated TppConsentSession ConsentAuthorisationApi will let BankingProtocol use the redirectCode to retrieve the TppConsentSession . Interacting with the PsuUserAgent 2.7 consentAuthState The CSRF-State String is called: consentAuthState 2.8 AuthorizeResponse The AuthorizeResponse returned to the ConsentAuthorisationUI is used to display info to the PSU. This AuthorizeResponse object is always synchronized with the ConsentAuthSessionCookie set with the same HTTP response object. Any session, account or payment information needed to manage the authorization process is stored in both AuthorizeResponse (for display) and in the encrypted in the ConsentAuthSessionCookie. The consentCookieString is httpOnly 2.9 ConsentAuthSessionCookie The ConsentAuthSessionCookie is used to maintain session between ConsentAuthorisationUI and ConsentAuthorisationApi. It will generated and set as a httpOnly, Secure 3. Displaying Consent Authorize UI 4. Redirecting PSU to the ASPSP The returned AuthorizeResponse object info information needed to redirect the PSU to the target ASPSP. BackRedirectURL (OKUrl, NOKURL, etc... dependent of ASPSP API) contains the consentAuthState.","title":"Redirect PSU to consent API"},{"location":"architecture/5-redirectPsuToConsentAPI/#redirect-psu-to-consent-api","text":"","title":"Redirect PSU to consent API"},{"location":"architecture/5-redirectPsuToConsentAPI/#1-consentauthorisationapi","text":"The redirect start with a get request to the entryPoint of the ConsentAuthorisationApi, for authorizing a consent initiated on the TppBankingApi side.","title":"1. ConsentAuthorisationApi"},{"location":"architecture/5-redirectPsuToConsentAPI/#diagram","text":"","title":"Diagram"},{"location":"architecture/5-redirectPsuToConsentAPI/#request-processing-consentapi","text":"","title":"Request processing ConsentAPI"},{"location":"architecture/5-redirectPsuToConsentAPI/#21-retrieve-corresponding-bankingprotocol","text":"ConsentAuthorisationApi will use the given redirectCode to load the matching BankingProtocol.","title":"2.1 Retrieve Corresponding BankingProtocol"},{"location":"architecture/5-redirectPsuToConsentAPI/#22-26-retrieve-associated-tppconsentsession","text":"ConsentAuthorisationApi will let BankingProtocol use the redirectCode to retrieve the TppConsentSession .","title":"2.2 .. 2.6 Retrieve associated TppConsentSession"},{"location":"architecture/5-redirectPsuToConsentAPI/#interacting-with-the-psuuseragent","text":"","title":"Interacting with the PsuUserAgent"},{"location":"architecture/5-redirectPsuToConsentAPI/#27-consentauthstate","text":"The CSRF-State String is called: consentAuthState","title":"2.7 consentAuthState"},{"location":"architecture/5-redirectPsuToConsentAPI/#28-authorizeresponse","text":"The AuthorizeResponse returned to the ConsentAuthorisationUI is used to display info to the PSU. This AuthorizeResponse object is always synchronized with the ConsentAuthSessionCookie set with the same HTTP response object. Any session, account or payment information needed to manage the authorization process is stored in both AuthorizeResponse (for display) and in the encrypted in the ConsentAuthSessionCookie. The consentCookieString is httpOnly","title":"2.8 AuthorizeResponse"},{"location":"architecture/5-redirectPsuToConsentAPI/#29-consentauthsessioncookie","text":"The ConsentAuthSessionCookie is used to maintain session between ConsentAuthorisationUI and ConsentAuthorisationApi. It will generated and set as a httpOnly, Secure","title":"2.9 ConsentAuthSessionCookie"},{"location":"architecture/5-redirectPsuToConsentAPI/#3-displaying-consent-authorize-ui","text":"","title":"3. Displaying Consent Authorize UI"},{"location":"architecture/5-redirectPsuToConsentAPI/#4-redirecting-psu-to-the-aspsp","text":"The returned AuthorizeResponse object info information needed to redirect the PSU to the target ASPSP. BackRedirectURL (OKUrl, NOKURL, etc... dependent of ASPSP API) contains the consentAuthState.","title":"4. Redirecting PSU to the ASPSP"},{"location":"architecture/5a-psuAuthEmbeddedConsent/","text":"Authorize Consent Embedded Approach Description Implements the process of collecting consent authorization credentials in an interface provided by the TPP as described EBA-RTS embedded approach. The authorization is designed as a recursive list of ChallengeResponse sessions. Diagram Use Cases 1.0 Create ConsentAuthSessionCookie If the TppConsentSession has an authChallenge, the interaction starts with the initialization of a ConsentAuthSessionCookie . The ConsentAuthSessionCookie is encrypted with a key stored in the consentSessionState . 2.0 Redirect to EmbeddedAuthInitScreen After preparation of the ConsentAuthSessionCookie, the UserAgent is redirected to the EmbeddedAuthInitScreen of the ConsentAuthorisationUI. 30 .. 40 Load AuthChallenge The authChallenge returns the ConsentAuthorizeResponse that contains all information necessary to display the challenge to the PSU. An ScaUIMetadaData object contain UI customization parameter. 50 .. 60 Display Auth Screen and Collect PSU Auth Data This STep will display the Auth Screen and collect PSU auth data. 70 .. 85 Send PSU Auth Data to ConsentAuthorisationApi The psuAuth endpoint of the ConsentAuthorisationApi will finally be called to process authentication data entered by the PSU. 90 .. 94 Redirect to FinTechApi As the TppConsentSession present no more AuthChallenge, a redirect session is prepared and the PSU is redirected back to the FinTechApi.","title":"Authorize Consent Embedded Approach"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#authorize-consent-embedded-approach","text":"","title":"Authorize Consent Embedded Approach"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#description","text":"Implements the process of collecting consent authorization credentials in an interface provided by the TPP as described EBA-RTS embedded approach. The authorization is designed as a recursive list of ChallengeResponse sessions.","title":"Description"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#diagram","text":"","title":"Diagram"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#use-cases","text":"","title":"Use Cases"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#10-create-consentauthsessioncookie","text":"If the TppConsentSession has an authChallenge, the interaction starts with the initialization of a ConsentAuthSessionCookie . The ConsentAuthSessionCookie is encrypted with a key stored in the consentSessionState .","title":"1.0 Create ConsentAuthSessionCookie"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#20-redirect-to-embeddedauthinitscreen","text":"After preparation of the ConsentAuthSessionCookie, the UserAgent is redirected to the EmbeddedAuthInitScreen of the ConsentAuthorisationUI.","title":"2.0 Redirect to EmbeddedAuthInitScreen"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#30-40-load-authchallenge","text":"The authChallenge returns the ConsentAuthorizeResponse that contains all information necessary to display the challenge to the PSU. An ScaUIMetadaData object contain UI customization parameter.","title":"30 .. 40 Load AuthChallenge"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#50-60-display-auth-screen-and-collect-psu-auth-data","text":"This STep will display the Auth Screen and collect PSU auth data.","title":"50 .. 60 Display Auth Screen and Collect PSU Auth Data"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#70-85-send-psu-auth-data-to-consentauthorisationapi","text":"The psuAuth endpoint of the ConsentAuthorisationApi will finally be called to process authentication data entered by the PSU.","title":"70 .. 85 Send PSU Auth Data to ConsentAuthorisationApi"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#90-94-redirect-to-fintechapi","text":"As the TppConsentSession present no more AuthChallenge, a redirect session is prepared and the PSU is redirected back to the FinTechApi.","title":"90 .. 94 Redirect to FinTechApi"},{"location":"architecture/5b-psuAuthRedirectConsent/","text":"Authorize Consent Redirect Approach Description Describes the process of redirecting a PSU to the Online Banking interface of it's ASPSP. Diagram Use Cases 010 .. 040 Display RedirectInfoPage A redirection to the ASPSP OnlineBanking interface start with a information of the PSU about the redirect process. After a confirmation of the redirection process through the PSU, a redirection is initiated by the ConsentAuthorizeApi. Managing Redirection 050 Redirecting PSU to the ASPSP Detailed specification of the redirect process might depend on the specification of the ASPSP interface. Nevertheless, the returned redirect link carries an ConsentAuthSessionCookie that is used to store consent details in the User Agent of the PSU. As well the consentAuthState shall be part of any BackRedirectURL (OKUrl, NOKURL) so we can decrypt the ConsentAuthSessionCookie when ASPSP sends back PSU to TPP. 060 Back-Redirecting PSU to the ConsentAuthorisationAPI The ASPSP url used to redirect the PSU to the ASPSP contains the consentAuthState. The consentAuthState will the be used to retrieve the attached ConsentAuthSessionCookie and retrieve the TppConsentSession. 071 .. 073 Forward call to BankingProtocol The aspspAuthSuccess method of the BankingProtocol is called with TppConsentSession and aspspAuthCode. - The aspspAuthCode can be use to retrieve Token from ASPSP Token endpoint in case of an oAuth Approach. - The consent session contains any other information needed to manage the consent process. 077 Redirect PSU to FinTechAPI The TppConsentSession is temporarily encrypted and stored. Corresponding redirectCode is used to redirect PSU to the FinTechAPI redirect endpoint. ConsentAuthSessionCookie is deleted with the redirect process.","title":"Authorize Consent Redirect Approach"},{"location":"architecture/5b-psuAuthRedirectConsent/#authorize-consent-redirect-approach","text":"","title":"Authorize Consent Redirect Approach"},{"location":"architecture/5b-psuAuthRedirectConsent/#description","text":"Describes the process of redirecting a PSU to the Online Banking interface of it's ASPSP.","title":"Description"},{"location":"architecture/5b-psuAuthRedirectConsent/#diagram","text":"","title":"Diagram"},{"location":"architecture/5b-psuAuthRedirectConsent/#use-cases","text":"","title":"Use Cases"},{"location":"architecture/5b-psuAuthRedirectConsent/#010-040-display-redirectinfopage","text":"A redirection to the ASPSP OnlineBanking interface start with a information of the PSU about the redirect process. After a confirmation of the redirection process through the PSU, a redirection is initiated by the ConsentAuthorizeApi.","title":"010 .. 040 Display RedirectInfoPage"},{"location":"architecture/5b-psuAuthRedirectConsent/#managing-redirection","text":"","title":"Managing Redirection"},{"location":"architecture/5b-psuAuthRedirectConsent/#050-redirecting-psu-to-the-aspsp","text":"Detailed specification of the redirect process might depend on the specification of the ASPSP interface. Nevertheless, the returned redirect link carries an ConsentAuthSessionCookie that is used to store consent details in the User Agent of the PSU. As well the consentAuthState shall be part of any BackRedirectURL (OKUrl, NOKURL) so we can decrypt the ConsentAuthSessionCookie when ASPSP sends back PSU to TPP.","title":"050 Redirecting PSU to the ASPSP"},{"location":"architecture/5b-psuAuthRedirectConsent/#060-back-redirecting-psu-to-the-consentauthorisationapi","text":"The ASPSP url used to redirect the PSU to the ASPSP contains the consentAuthState. The consentAuthState will the be used to retrieve the attached ConsentAuthSessionCookie and retrieve the TppConsentSession.","title":"060 Back-Redirecting PSU to the ConsentAuthorisationAPI"},{"location":"architecture/5b-psuAuthRedirectConsent/#071-073-forward-call-to-bankingprotocol","text":"The aspspAuthSuccess method of the BankingProtocol is called with TppConsentSession and aspspAuthCode. - The aspspAuthCode can be use to retrieve Token from ASPSP Token endpoint in case of an oAuth Approach. - The consent session contains any other information needed to manage the consent process.","title":"071 .. 073 Forward call to BankingProtocol"},{"location":"architecture/5b-psuAuthRedirectConsent/#077-redirect-psu-to-fintechapi","text":"The TppConsentSession is temporarily encrypted and stored. Corresponding redirectCode is used to redirect PSU to the FinTechAPI redirect endpoint. ConsentAuthSessionCookie is deleted with the redirect process.","title":"077 Redirect PSU to FinTechAPI"},{"location":"architecture/6-consume_api.puml/","text":"Consume API after Consent Authorization Description This workflow starts with the redirect link leaving from either Authorize Consent Redirect Approach or Authorize Consent Embedded Approach . This redirect link will be used by the FinTechApi to retrieve a corresponding Token that can be used to request services on behalf of the PSU. As long as this token is valid, token will be used to perform corresponding service request on behalf on the PSU. Diagram Use Cases 010. FinTechApi.consentAuthDone The redirect request coming from the ConsentAuthorisationApi contains a redirectCode. This request will be forwarded by the FinTechApi to the TppBankingApi. The request contains following information: redirectCode Available in the redirect url. This information will be used to retrieve the authorization token from the TppBankingApi. So the information needs not be processed by th FinTechApi FinTechConsentSessionCookie Available in the request header. This cookie shall be set for the Max time given to the PSU for the authorization of the corresponding consent. The cookie can be bound to the end point FinTechApi.consentAuthDone so it does no need to be transported to the server on other requests. finTechConsentSessionState Available in the redirect url. Will be used to read and validate the corresponding FinTechConsentSessionCookie. 020. Validate the redirectLink The finTechConsentSessionState will be used to read and validate the corresponding FinTechConsentSessionCookie. 030. TppBankingApi.code2Token This end point is invoked by the FinTechApi to retrieve token used to send subsequent service requests to the TppBankingApi. 040. BankingProtocol.code2Token Forward request to banking protocol. 050. Store Token (PsuConsentSession) The returned PsuConsentSession is stored by the FinTechApi for future use. 060 .. 67 Service Request The returned token is used to invoke the service request (ListTransactions). Service result is returned to the FinTechApi and displayed to the PSU.","title":"Consume API after Consent Authorization"},{"location":"architecture/6-consume_api.puml/#consume-api-after-consent-authorization","text":"","title":"Consume API after Consent Authorization"},{"location":"architecture/6-consume_api.puml/#description","text":"This workflow starts with the redirect link leaving from either Authorize Consent Redirect Approach or Authorize Consent Embedded Approach . This redirect link will be used by the FinTechApi to retrieve a corresponding Token that can be used to request services on behalf of the PSU. As long as this token is valid, token will be used to perform corresponding service request on behalf on the PSU.","title":"Description"},{"location":"architecture/6-consume_api.puml/#diagram","text":"","title":"Diagram"},{"location":"architecture/6-consume_api.puml/#use-cases","text":"","title":"Use Cases"},{"location":"architecture/6-consume_api.puml/#010-fintechapiconsentauthdone","text":"The redirect request coming from the ConsentAuthorisationApi contains a redirectCode. This request will be forwarded by the FinTechApi to the TppBankingApi. The request contains following information:","title":"010. FinTechApi.consentAuthDone"},{"location":"architecture/6-consume_api.puml/#redirectcode","text":"Available in the redirect url. This information will be used to retrieve the authorization token from the TppBankingApi. So the information needs not be processed by th FinTechApi","title":"redirectCode"},{"location":"architecture/6-consume_api.puml/#fintechconsentsessioncookie","text":"Available in the request header. This cookie shall be set for the Max time given to the PSU for the authorization of the corresponding consent. The cookie can be bound to the end point FinTechApi.consentAuthDone so it does no need to be transported to the server on other requests.","title":"FinTechConsentSessionCookie"},{"location":"architecture/6-consume_api.puml/#fintechconsentsessionstate","text":"Available in the redirect url. Will be used to read and validate the corresponding FinTechConsentSessionCookie.","title":"finTechConsentSessionState"},{"location":"architecture/6-consume_api.puml/#020-validate-the-redirectlink","text":"The finTechConsentSessionState will be used to read and validate the corresponding FinTechConsentSessionCookie.","title":"020. Validate the redirectLink"},{"location":"architecture/6-consume_api.puml/#030-tppbankingapicode2token","text":"This end point is invoked by the FinTechApi to retrieve token used to send subsequent service requests to the TppBankingApi.","title":"030. TppBankingApi.code2Token"},{"location":"architecture/6-consume_api.puml/#040-bankingprotocolcode2token","text":"Forward request to banking protocol.","title":"040. BankingProtocol.code2Token"},{"location":"architecture/6-consume_api.puml/#050-store-token-psuconsentsession","text":"The returned PsuConsentSession is stored by the FinTechApi for future use.","title":"050. Store Token (PsuConsentSession)"},{"location":"architecture/6-consume_api.puml/#060-67-service-request","text":"The returned token is used to invoke the service request (ListTransactions). Service result is returned to the FinTechApi and displayed to the PSU.","title":"060 .. 67 Service Request"},{"location":"architecture/dictionary/","text":"Dictionary PsuUserDevice A PSU user device runs applications used by the PSU to access banking functionality. Those applications are generally called PsuUgerAgents. PsuUserAgent Application running on a PSU device and used by the PSU to access banking functionality. We are describing the two main types of PsuUserAgents. WebBrowser A Web browser is considered compliant in the context of this framework when it can protect specific information used between the PusUserDevice and the the corresponding server application to track the user session. For session tracking, this framework uses Cookies RFC6265 . Security Considerations The use of cookies provides the most elaborated way to protect a session established between a WebBrowser and server application. We assume a WebBrowser storing a cookie fulfills following requirements: - Cookies carrying the attribute HttpOnly are not provided access to scripts run by the UserAgent. - Cookies carrying the attribute Secure are only resent to the server over SSL connections. - Expired Cookies (attribute Expires ) are not resent to the server. - Cookies shall never be transmitted to a domain not matching it's origin. Redirection The server can request the WebBrowser to redirect the user to another page by returning a 30[X] response code to the WebBrowser. Redirection will generally happens in the same Browser environment. We will be using redirection to switch the user context from one application to another one. Following redirection will generally be found in this framework: - FinTechApi to-> ConsentAuthorisationApi - ConsentAuthorisationApi to-> OnlineBankingApi - OnlineBankingApi backTo-> ConsentAuthorisationApi - ConsentAuthorisationApi backTo-> FinTechApi Redirection and Data Sharing We assume all three applications FinTechApi, ConsentAuthorisationApi, OnlineBankingApi are hosted on different domains. This is, we are not expecting Cookies set by one application to be visible to another application (this might still happen on some local development environment, where everything runs on localhost). We also do not advice adding persistent information to RedirectUrl , as these are log files everywhere on infrastructure components in data centers. RedirectUrl shall instead carry OneTime and ShortLived authorization code we call code , that can be used to retrieved shared payload through an authenticated back channel connection. This is the practice borrowed from oAuth2 RFC6749 . Following table shows defined redirects and corresponding back chanel endpoints. Origin Application Redirecting Application Response Code; Location ; AuthCodeParam; Expiration Redirect Target Application Destination Application Data EndPoint at Origin Application TppBankingApi FinTechApi 302 ; /auth ; code ; 5s ConsentAuthorisationApi ConsentAuthorisationApi /loadTppConsentSession ConsentAuthorisationApi ConsentAuthorisationApi Proprietary banking API. Assume RFC6749. /auth OnlineBankingApi OnlineBankingApi none OnlineBankingApi OnlineBankingApi 302 ; [/ok|/nok] ; code ; 5s ConsentAuthorisationApi ConsentAuthorisationApi /token ConsentAuthorisationApi ConsentAuthorisationApi 302 ; [/ok|/nok] ; code ; 5s FinTechApi TppBankingApi /loadTppConsentSession Keeping Session Information We assume all three applications FinTechApi, ConsentAuthorisationApi, OnlineBankingApi maintain their own session information. This framework uses following terms to name the session information held by an application on the UserAgent of the PSU. Application SessionCookie FinTechApi Psu2FintechLoginSession ConsentAuthorisationApi ConsentAuthSessionCookie OnlineBankingApi OnlineBankingConsentSessionCookie Session information can also be kept across redirect life cycles. Upon redirecting the UserAgent to another application, the redirecting application can set Cookies that will be resent to the domain with future requests. This way, there will be no need to maintain user session information in temporary databases on the server, thus keeping server tiny. Native App The UserAgent might be a native application running on a user mobile device or a desktop computer. In this case, redirection might still take place, but with consideration of the physical transition between source and target UI-Application. Following specifications deal with security threads associated with the redirection between UI-Application on a user device: RFC8252:OAuth 2.0 for Native Apps , RFC7636:Proof Key for Code Exchange by OAuth Public Clients For the purpose of kepping the overall architecture of this framework simple, we will require native applications to provide the same behavior as the WebBrowser described above. UserAgentContext All information associated with the PsuUserAgent. Like PSU-IP-Address, PSU-IP-Port, PSU-Accept, PSU-Accept-Charset, PSU-Accept-Encoding, PSU-Accept-Language, PSU-Device-ID, PSU-User-Agent, PSU-Geo-Location, PSU-Http-Method. Many backend API will require provisioning of the UserAgentContext to perform verification of the authenticity of the original PSU request and to customize the response produced for intermediary layers. FinTechUI UI Application running on the PsuUserAgent and used by the PSU to access the FinTechApi ConsentAuthorisationUI UI used by PSU to authoraise consent in embedded case. OnlineBankingUI This UI manages the interaction between the PSU and the ASPSP in redirect cases. FinTechDC Data center environment of the FinTech. Host the FinTechApi. FinTechApi Financial web service provided by the FinTech. FinTechLoginSessionCookie This is a cookie used to maintain the login session between the FinTechUI and the FinTechApi. As this maintains the login state of the PSU in the FinTechUI, this session can be kept open for the life span of the interaction between the FinTechUI and the FinTechApi. Fintech2TppRedirectInfoPage This panel will be used to inform the PSU upon redirecting the PSU to the ConsentAuthorisationApi. This information step is recommended as changes in UI display between the FinTechUI and the ConsentAuthorisationUI might confuse the PSU. Tpp Data Center Data center environment of the TPP TppBankingApi Tpp backend providing access to ASPSP banking functionality. This interface is not directly accessed by the PSU but by the FinTechApi. FinTechApi will use a FinTechContext to authenticate with the TppBankingApi. TppBankSearchApi Repository of banks maintained in the TPP's banking gateway. The banking search API will later presen an interface to configure profiles attached to listed banks. BankDescriptor Descriptive information assocaited with a bank like: - The name of the Bank - The address of the bank - The bank identification code BankProfile BankingApi profile information associated with a bank like: - The BankingProtocol used to connect with the bank - List of Banking services provided by the BankingApi of the bank - SCA approcahes associated with the BankingApi - ScaUIMetadaData: Screens and field used to collect user authentication data. - Actions to be performed by the PSU prior to using the BankingProtocol AisConsentSpec Specification associated with an AisConsent. This is highly dependent on the BankProfile. Following information might be carried by an AisConsentSpec object: - recurringIndicator - validUntil - frequencyPerDay - combinedService - accountAccessTemplate - availableAccounts[availableAccountsWithBalances, allAccounts] - allPsd2[allAccounts] FinTechContext Information used to identify the FinTech application at the TppBankingApi. For example a FinTech SSL client certificate or an APIKey or an oAuth2 Password Grant Credential. PsuConsentSession Information associated with the consent as exchanged between the FinTechApi and the TppBankingApi. Generally contains: - Data needed to customize psu access at the ConsentAuthorisationApi (showInfoPanel, fintechStateHash) - Data needed to manage redirection of PSU from the TppConsentSession to the FintechUI like (FinTech-Redirect-URI, FinTech-Nok-Redirect- URI, FinTech-Explicit-Authorisation-Preferred, FinTech-Content-Negotiation) Object also contains information associated with the PSU requesting service if available. - The identifier of the PSU in the realm of the Tpp PsuIdentifier - Existing Consent References if any. PsuIdentifier This is the identifier of the PSU in the FinTech2Tpp relationship. This identifier can be saved once a consent has been successfully established to allow for reuse of existing consent in future sessions. ConsentAuthorisationApi Interface used by the PSU to authorize a consent. ConsentAuthSessionCookie This is the cookie object used to maintain the consent session between the ConsentAuthorisationUI and the ConsentAuthorisationApi. It will generated and set as a httpOnly, Secure consentAuthState This is the CSRF-State String of the ConsentAuthorisationApi. It is a transient reference of the consent request. It encodes a key that is used to encrypt information stored in the corresponding ConsentAuthSessionCookie. This is: consentAuthState = state-id + consentEncryptionKey All requests to the ConsentAuthorisationApi must always provide the consentAuthState as a X-XRSF-Token and set a ConsentAuthSessionCookie as a cookie. Passing a consentAuthState to the UI. - For 30X Redirect Requests, this is passed to the UI as a URL query param part of the redirect URL. - For 20X Responses, this is part of the returned response body (AuthorizeResponse). The consentAuthState shall never be stored in the ConsentAuthSessionCookie. As a redirect request carries the consentAuthState in parameter, a new consentAuthState shall be generated after each redirect and returned back to the client, as the old one is probably leaked into log files as part of a request URI. RedirectSessionStoreApi Storage of temporary redirect sessions. Redirect session are stored only for the duration of the redirect request while redirecting from the TppBankingApi to the ConsentAuthorisationApi and from the ConsentAuthorisationApi back to the TppBankingApi. Consent Data might contain security sentive data like account number or payment information of the PSU. This is the reason why they will be encrypted prior to being temporarily held for the duration of the redirection in the RedirectSessionStoreApi. So the RedirectSessionStoreApi will generate a temporary authorization code that contains both the id of the redirect session and the key used to encrypt the content of the redirect session. Upon request, the RedirectSessionStoreApi will use the provided authorization code to read and decrypt the consent session and will delete the consent session prior to returning it for the first time to the caller. BankingProtocol Component managing access to a banking interface initiative. WE will have to deal with many protocols like NextGenPSD2, HBCI, OpenBanking UK, PolishAPI. BankingProtocolSelector Help select a banking protocol. Aspsp Data Center Data center environment of the ASPSP AspspBankingApi Api banking provided by ASPSP. This interface is not directly accessed by the PSU but by the TppBankingApi. TppBankingApi will use a TppContext to authenticate with the TppBankingApi. TppContext Information used to identify the Tpp application in the ASPSP environment. Like a TPP QWAC certificate. TppConsentSession FinTechContext : Data needed to authorize the FinTechApi (FinTechSSLCertificate, ApiKey, SignedJWT) PsuConsentSession : Information associated with the consent initialized by the TPP at the ASPSP interface. Additional information not available in the PsuConsentSession: Containing ConsentId, ConsentData, AspspConsentSessionRedirectUrl. OnlineBankingApi Generally the online banking application on an ASPSP. In redirect cases, the ASPSP OnlineBankingApi establishes a direct session with the PSU to allow the PSU to identify himself, review and authorize the consent. OnlineBankingConsentSessionCookie This is a Cookie used to maintain the session between the OnlineBankingUI and the OnlineBankingApi. As a recommendation, the validity of this Cookie shall be limited to the life span of the consent session. As the OnlineBankingApi redirects the PSU back to the ConsentAuthorisationApi up on completion of the consent session. Redirection happens independently on whether the consent was authorized or not. OnlineBanking2ConsentAuthRedirectInfoPage It is recommended to inform the PSU prior to redirecting the PSU back to the TPP. This UI-Panel will be called OnlineBanking2ConsentAuthRedirectInfoPage. If the ASPSP is using a trusted environment (Native App) and wants to keep the relationship to the PSU alive, it is necessary to store this relationship in a separated OnlineBankingLoginSessionCookie. OnlineBankingLoginSessionCookie This Cookie will be used by the ASPSP to keep a login session of the PSU over the life span of consent session. This will prevent the PSU from performing the login step for upcoming consent sessions. ConsentData Specification of the requested consent. BankAccount, frequencyPerDay, validUntil, ...,","title":"Dictionary"},{"location":"architecture/dictionary/#dictionary","text":"","title":"Dictionary"},{"location":"architecture/dictionary/#webbrowser","text":"A Web browser is considered compliant in the context of this framework when it can protect specific information used between the PusUserDevice and the the corresponding server application to track the user session. For session tracking, this framework uses Cookies RFC6265 .","title":"WebBrowser"},{"location":"architecture/dictionary/#security-considerations","text":"The use of cookies provides the most elaborated way to protect a session established between a WebBrowser and server application. We assume a WebBrowser storing a cookie fulfills following requirements: - Cookies carrying the attribute HttpOnly are not provided access to scripts run by the UserAgent. - Cookies carrying the attribute Secure are only resent to the server over SSL connections. - Expired Cookies (attribute Expires ) are not resent to the server. - Cookies shall never be transmitted to a domain not matching it's origin.","title":"Security Considerations"},{"location":"architecture/dictionary/#redirection","text":"The server can request the WebBrowser to redirect the user to another page by returning a 30[X] response code to the WebBrowser. Redirection will generally happens in the same Browser environment. We will be using redirection to switch the user context from one application to another one. Following redirection will generally be found in this framework: - FinTechApi to-> ConsentAuthorisationApi - ConsentAuthorisationApi to-> OnlineBankingApi - OnlineBankingApi backTo-> ConsentAuthorisationApi - ConsentAuthorisationApi backTo-> FinTechApi","title":"Redirection"},{"location":"architecture/dictionary/#redirection-and-data-sharing","text":"We assume all three applications FinTechApi, ConsentAuthorisationApi, OnlineBankingApi are hosted on different domains. This is, we are not expecting Cookies set by one application to be visible to another application (this might still happen on some local development environment, where everything runs on localhost). We also do not advice adding persistent information to RedirectUrl , as these are log files everywhere on infrastructure components in data centers. RedirectUrl shall instead carry OneTime and ShortLived authorization code we call code , that can be used to retrieved shared payload through an authenticated back channel connection. This is the practice borrowed from oAuth2 RFC6749 . Following table shows defined redirects and corresponding back chanel endpoints. Origin Application Redirecting Application Response Code; Location ; AuthCodeParam; Expiration Redirect Target Application Destination Application Data EndPoint at Origin Application TppBankingApi FinTechApi 302 ; /auth ; code ; 5s ConsentAuthorisationApi ConsentAuthorisationApi /loadTppConsentSession ConsentAuthorisationApi ConsentAuthorisationApi Proprietary banking API. Assume RFC6749. /auth OnlineBankingApi OnlineBankingApi none OnlineBankingApi OnlineBankingApi 302 ; [/ok|/nok] ; code ; 5s ConsentAuthorisationApi ConsentAuthorisationApi /token ConsentAuthorisationApi ConsentAuthorisationApi 302 ; [/ok|/nok] ; code ; 5s FinTechApi TppBankingApi /loadTppConsentSession","title":"Redirection and Data Sharing"},{"location":"architecture/dictionary/#keeping-session-information","text":"We assume all three applications FinTechApi, ConsentAuthorisationApi, OnlineBankingApi maintain their own session information. This framework uses following terms to name the session information held by an application on the UserAgent of the PSU. Application SessionCookie FinTechApi Psu2FintechLoginSession ConsentAuthorisationApi ConsentAuthSessionCookie OnlineBankingApi OnlineBankingConsentSessionCookie Session information can also be kept across redirect life cycles. Upon redirecting the UserAgent to another application, the redirecting application can set Cookies that will be resent to the domain with future requests. This way, there will be no need to maintain user session information in temporary databases on the server, thus keeping server tiny.","title":"Keeping Session Information"},{"location":"architecture/dictionary/#native-app","text":"The UserAgent might be a native application running on a user mobile device or a desktop computer. In this case, redirection might still take place, but with consideration of the physical transition between source and target UI-Application. Following specifications deal with security threads associated with the redirection between UI-Application on a user device: RFC8252:OAuth 2.0 for Native Apps , RFC7636:Proof Key for Code Exchange by OAuth Public Clients For the purpose of kepping the overall architecture of this framework simple, we will require native applications to provide the same behavior as the WebBrowser described above.","title":"Native App"}]}